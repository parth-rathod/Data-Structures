class Stack():
    def __init__(self):
        self.items = []
        
    def push(self,item):
        self.items.append(item)
    
    def pop(self):
        if len(self.items) != 0:
            return self.items.pop()
    
    def __len__(self):
        return len(self.items)

class Queue():
    def __init__(self):
        self.items = []
        
    def enque(self,item):
        self.items.insert(0,item)
        
    def deque(self):
        if len(self.items) != 0:
            return self.items.pop()
        
    # This module for adding the node to give output
    def watch(self):
            if len(self.items) != 0:
                return self.items[-1].value 
    
    def __len__(self):
        return len(self.items)


class Node():
    def __init__(self,value):
        self.value = value
        self.left = None
        self.right = None

class Binary_tree():
    def __init__(self,root):
        self.root = Node(root)
    
    def preorder_traversal(self,start,traversal):
        if start:
            traversal += (str(start.value)+ "-")
            traversal = self.preorder_traversal(start.left,traversal)
            traversal = self.preorder_traversal(start.right,traversal)
        return traversal
    
    def postorder_traversal(self,start,traversal):
        if start:
            traversal = self.postorder_traversal(start.left,traversal)
            traversal = self.postorder_traversal(start.right,traversal)
            traversal += (str(start.value)+ "-")
        return traversal
    
    def inorder_traversal(self,start,traversal):
        if start:
            traversal = self.inorder_traversal(start.left,traversal)
            traversal += (str(start.value)+ "-")
            traversal = self.inorder_traversal(start.right,traversal)  
        return traversal
    
    def print_tree(self,tree_type):
        if tree_type == "preorder":
            return self.preorder_traversal(tree.root,"")
        elif tree_type == "postorder":
            return self.postorder_traversal(tree.root,"")
        elif tree_type == "inorder":
            return self.inorder_traversal(tree.root,"")
        elif tree_type == "levelorder":
            return self.levelorder_traversal(tree.root)
        elif tree_type == "reverseorder":
            return self.reverseorder_traversal(tree.root)
        elif tree_type == "height":
            return self.height_tree(tree.root)
        else:
            return "No such Traversal Algorithm: " +tree_type
          
    def levelorder_traversal(self,start):
        if start is None:
            return
        
        queue = Queue()
        queue.enque(start)
        traversal = ""
        while len(queue) > 0:
            traversal += str(queue.watch()) + "-"
            node = queue.deque()
            if node.left:
                queue.enque(node.left)
            if node.right:
                queue.enque(node.right)
                
        return traversal
    
    def reverseorder_traversal(self,start):
        if start is None:
            return
        
        queue = Queue()
        queue.enque(start)
        stack = Stack()
        traversal = ""
        while len(queue) > 0:
            node = queue.deque()
            stack.push(node)
            if node.right:
                queue.enque(node.right)
            if node.left:
                queue.enque(node.left)
        while len(stack) > 0:
            node = stack.pop()
            traversal += str(node.value) + "-"
        
        return traversal
    
    def height_tree(self,start):
        if start is None:
            return -1
        
        left = self.height_tree(start.left)
        right = self.height_tree(start.right)
        
        return 1 + max(left,right)
    

tree = Binary_tree(1)
tree.root.left = Node(2)
tree.root.right = Node(3)
tree.root.left.left = Node(4)
tree.root.left.right = Node(5)
tree.root.right.left = Node(6)
tree.root.right.right = Node(7)

print("Post Order Traversal:",tree.print_tree("postorder"))
print("Pre Order Traversal:",tree.print_tree("preorder"))
print("In Order Traversal:",tree.print_tree("inorder"))
print("Level Order Traversal:",tree.print_tree("levelorder"))
print("Reverse Order Traversal:",tree.print_tree("reverseorder"))
print("Height of tree:",tree.print_tree("height"))

# Tree Strutcture
#          1
#        /   \
#       2      3
#      / \    / \ 
#     4   5   6  7

