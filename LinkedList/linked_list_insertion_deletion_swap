class Node():
    def __init__(self,data):
        self.data = data
        self.next = None

class LinkedList():
    def __init__(self):
        self.head = None
        
    def print_list(self):
        cur_node = self.head
        while cur_node:
            print(cur_node.data)
            cur_node = cur_node.next
            
    
    def append(self,data):
        new_node = Node(data)
        
        if self.head is None:
            self.head = new_node
            return 
        
        last_node = self.head
        while last_node.next:
            last_node = last_node.next
        last_node.next = new_node
        
    def prepend(self,data):
        new_node = Node(data)
        
        new_node.next  = self.head
        self.head = new_node
    
    
    def insert_after(self,prev,data):
        new_node = Node(data)
        cur = self.head
        count = 0
        while cur: 
            if cur.data == prev:
                new_node.next = cur.next
                cur.next = new_node
                count +=1
                break
                
            cur = cur.next
        if count == 0:
            print("{} node is not present".format(prev))
            
    def delete_node(self,data):
        
        cur_node = self.head
        if cur_node and cur_node.data == data:
            self.head = cur_node.next
            cur_node = None
            return
        
        prev = None
        while cur_node and cur_node.data != data:
            prev = cur_node
            cur_node = cur_node.next
        prev.next = cur_node.next
        cur_node = None
        
    def swap_node(self,key1,key2):
        if key1 == key2:
            return "Cannot swap same node"
        
        cur = self.head
        x, y = None,None
        
        while cur:
            if cur.data == key1:
                x = cur
            if cur.data == key2:
                y = cur
            cur = cur.next
        
        if x and y:
            x.data,y.data = y.data,x.data
        else:
            return "One of the node doesnt exist"
        
        
    
llist = LinkedList()
llist.append("A")
llist.append("B")
llist.append("C")
llist.append("D")
llist.append("E")
llist.swap_node("E","B")
#llist.delete_node("E")
#llist.insert_after("B","A")
llist.print_list()
                
